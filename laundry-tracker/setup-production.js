#!/usr/bin/env node

/**
 * Production Domain Setup Script
 * This script helps configure your application for production domain
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupProduction() {
  console.log('üöÄ Production Domain Setup for Laundry Tracker\n');
  
  // Get domain from user
  const domain = await question('Enter your production domain (e.g., https://laundrytracker.com): ');
  
  if (!domain.startsWith('https://')) {
    console.log('‚ùå Domain must start with https:// for security');
    process.exit(1);
  }
  
  console.log(`\nüìù Configuring for domain: ${domain}\n`);
  
  // Create production environment file
  const envContent = `# Production Environment Configuration
# Generated by setup-production.js

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=${process.env.NEXT_PUBLIC_SUPABASE_URL || '<your-supabase-url>'}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '<your-supabase-anon-key>'}
SUPABASE_SERVICE_ROLE_KEY=${process.env.SUPABASE_SERVICE_ROLE_KEY || '<server-role-key>'}

# Production Domain
NEXT_PUBLIC_SITE_URL=${domain}

# Web Push (VAPID)
WEB_PUSH_PUBLIC_VAPID_KEY=${process.env.WEB_PUSH_PUBLIC_VAPID_KEY || '<generated_public_key>'}
WEB_PUSH_PRIVATE_VAPID_KEY=${process.env.WEB_PUSH_PRIVATE_VAPID_KEY || '<generated_private_key>'}
WEB_PUSH_CONTACT=mailto:admin@${domain.replace('https://', '')}

# Client-side VAPID key
NEXT_PUBLIC_VAPID_PUBLIC_KEY=${process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || '<generated_public_key>'}
`;

  // Write .env.production file
  fs.writeFileSync('.env.production', envContent);
  console.log('‚úÖ Created .env.production file');
  
  // Update package.json scripts if needed
  const packageJsonPath = path.join(__dirname, 'package.json');
  if (fs.existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    if (!packageJson.scripts['build:prod']) {
      packageJson.scripts['build:prod'] = 'NODE_ENV=production next build';
      packageJson.scripts['start:prod'] = 'NODE_ENV=production next start';
      
      fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
      console.log('‚úÖ Updated package.json with production scripts');
    }
  }
  
  console.log('\nüìã Next Steps:');
  console.log('1. Update your Supabase dashboard:');
  console.log(`   - Site URL: ${domain}`);
  console.log(`   - Redirect URLs: ${domain}/auth/callback`);
  console.log(`   - Additional redirect URLs: ${domain}`);
  console.log('\n2. Update email templates in Supabase:');
  console.log('   - Go to Authentication ‚Üí Email Templates');
  console.log('   - Update confirmation and reset password templates');
  console.log('\n3. Test your configuration:');
  console.log('   - Deploy your application');
  console.log('   - Test email verification');
  console.log('   - Test push notifications');
  console.log('\n4. Security checklist:');
  console.log('   - Ensure HTTPS is enabled');
  console.log('   - Verify SSL certificate');
  console.log('   - Test from different browsers');
  
  console.log('\nüéâ Setup complete! Check DOMAIN_SETUP.md for detailed instructions.');
  
  rl.close();
}

setupProduction().catch(console.error);

